1. Start 3 containers from image that does not automatically exit, such as nginx, detached. Stop 2 of the containers leaving 1 up.

1) docker run -d --name nginx1 nginx
2) docker run -d --name nginx2 nginx
3) docker run -d --name nginx3 nginx
4) docker stop nginx2
5) docker stop nginx3


2. We’ve left containers and a image that won’t be used anymore and are taking space, as docker ps -a and docker images will reveal. Clean the docker daemon from all images and containers.

1) you can always remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes with "docker system prune"
To do it 1 by 1 :
2) use the command "docker rm" for each container in "docker ps -a" that is stopped
2) use the command "docker rmi" for each image in "docker images"
If you want to remove everything use :
1) docker rm $(docker ps -a -q)
2) docker rmi $(docker images -q)


3. Start image devopsdockeruh/pull_exercise with flags -it like so: docker run -it devopsdockeruh/pull_exercise. It will wait for your input. Navigate through docker hub to find the docs and Dockerfile that was used to create the image.
Read the Dockerfile and/or docs to learn what input will get the application to answer a “secret message”. 

1) docker run -it devopsdockeruh/pull_exercise
2) go to https://hub.docker.com/r/devopsdockeruh/pull_exercise and find the git source code
3) you will see there a index.js file that contains the password : basics


4. Start image devopsdockeruh/exec_bash_exercise, it will start a container with clock-like features and create a log. Go inside the container and use tail -f ./logs.txt to follow the logs. Every 15 seconds the clock will send you a “secret message”.

1) docker run -it devopsdockeruh/exec_bash_exercise
2) open new terminal and find the container id with "docker ps"
3) docker exec -it container_id bash
4) tail -f logs.txt
5) you will see the password : Docker is easy


5. Start a ubuntu image with the process sh -c 'echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website;'
You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags to use so that the read actually waits for input.
Test inputting helsinki.fi into the application. It should respond with something like
<html><head>
<title>301 Moved Permanently</title>
</head><body>
<h1>Moved Permanently</h1>
<p>The document has moved <a href="http://www.helsinki.fi/">here</a>.</p>
</body></html>

1) build a Dockerfile:
nano Dockerfile

FROM ubuntu
RUN apt-get update && apt-get install -y curl
CMD sh -c 'echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website;'

2) docker build . -t exenumfive
3) docker run exenumfive 
4) input helsinki.fi.


6. A good developer creates well written READMEs that can be used to create Dockerfiles with ease.
Clone, fork or download a project from https://github.com/docker-hy/frontend-example-docker.
Create a Dockerfile for the project and give a command so that the project runs in a docker container with port 5000 exposed and published so when you start the container and navigate to http://localhost:5000 you will see message if you’re successful.
TIP: The project has install instructions in README.
TIP: Note that the app starts to accept connections when Accepting connections at http://localhost:5000 has been printed to the screen, this a few seconds
TIP: You do not have to install anything new outside containers.

1) download the git and create Dockerfile (in the same directory) :
nano Dockerfile 
 
FROM node:10-alpine
WORKDIR /app
COPY . /app
RUN npm install -g serve && npm install webpack
EXPOSE 5000
CMD npm start

2) docker build . -t frontnode

3) docker run -p 5000:5000 frontnode


7. Clone, fork or download a project from https://github.com/docker-hy/backend-example-docker.
Create a Dockerfile for the project and give a command so that the project runs in a docker container with port 8000 exposed and published so when you start the container and navigate to http://localhost:8000 you will generate a message in logs.txt in the root.
Create a volume for the logs.txt so that when the application is shut down the logs are not destroyed. And when restarted it continues to write into the same logs.txt.

1) download the git and create Dockerfile (in the same directory) :
nano Dockerfile 

FROM node:10-alpine
WORKDIR /app
COPY . /app
RUN npm install cross-env
EXPOSE 8000
ENV FRONT_URL=http://localhost:5000
CMD npm start

2) docker build . -t backnode

2) docker run -p 8000:8000 -v /PATH_TO_LOGS_TXT/logs.txt:/app/logs.txt backnode


8. Start both frontend-example and backend-example with correct ports exposed and add ENV to Dockerfile with necessary information from both READMEs (front,back).
Ignore the backend configurations until frontend sends requests to <backend>/ping when you press the button.
You know that the configuration is ready when the button for 1.12 of frontend-example responds and turns green.
Do not alter the code of either project

1) add to frontnode Dockerfile this line :
ENV API_URL=http://localhost:8000

2) add to backnode Dockerfile this line :
ENV FRONT_URL=http://localhost:5000

3) build both images again and run again with the same commands as before 

4) test the connection with the "Exercise 1.12" button inside the web app

9. Document the image size before the changes.
Rather than going to FROM alpine or scratch, lets go look into docker-node and we should find a way how to run a container that has everything pre-installed for us. Theres even a best practices guide
Return back to our frontend & backend Dockerfiles and change the FROM to something more suitable. Make sure the application still works after the changes.
Document the size after this change. If you used the alpine version the size for frontend can be less than 250MB. The backend can be below 150MB.

If you use the node:10-alpine starter image you have get the smallest image.




